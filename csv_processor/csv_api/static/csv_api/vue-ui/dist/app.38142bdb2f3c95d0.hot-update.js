"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(typeof self !== 'undefined' ? self : this)["webpackHotUpdatevue_autocomplete_component_example"]("app",{

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/components/SearchAutocomplete.vue?vue&type=script&lang=js":
/*!****************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/components/SearchAutocomplete.vue?vue&type=script&lang=js ***!
  \****************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'SearchAutocomplete',\n  props: {\n    items: {\n      type: Array,\n      required: false,\n      default: () => []\n    }\n  },\n  data() {\n    /* Here we initialize all the variables */\n    return {\n      search: '',\n      // initialize search results\n      results: [],\n      // receive an array\n      isOpen: false,\n      // start with the component closed\n      /* index of the currently selected/highlighted item. When it is -1,\r\n      no item is selected.*/\n      selectedIndex: -1,\n      nextInputValue: ''\n    };\n  },\n  mounted() {\n    document.addEventListener('click', this.handleClickOutside);\n  },\n  beforeUnmount() {\n    document.removeEventListener('click', this.handleClickOutside);\n  },\n  methods: {\n    /* Helper to clear the search box */\n    clearTxt() {\n      this.search = '';\n    },\n    /* Helper to clear and close the search box */\n    resetCmp() {\n      this.search = '';\n      this.isOpen = false;\n    },\n    /* If you only work in English, just use this function indeed instead of fiterResults */\n    filterResultsUnaccented() {\n      this.results = this.items.filter(item => item.toLowerCase().indexOf(this.search.toLowerCase()) > -1);\n    },\n    /* Unicode version of filterResultsUnaccented. All the accented characters\r\n     such as à, á, â, ã, etc. will be treated like \"a\". Great for multilanguage\r\n      autocomplete. */\n    filterResults() {\n      const searchTerm = this.search.toLowerCase();\n      this.results = this.items.filter(item => {\n        /* The \\u0300-\\u036f Unicode range, primarily covers the diacritics used in the Latin script, which indeed includes a vast majority of European languages. The following normalizes the list of names. */\n        const normalizedItem = item.toLowerCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n        /* This normalizes the search term in the autocomplete input field */\n        const normalizedSearch = searchTerm.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n        // Check if the normalized item contains the normalized search term\n        return normalizedItem.indexOf(normalizedSearch) > -1;\n      });\n    },\n    /* The user typed a new letter in the input box (or deleted it) and the search\r\n    \tsuggestions should be adjusted accordingly. */\n    onChange() {\n      this.filterResults();\n      // Check for non-empty input or non-empty results\n      if (this.search.trim() !== '' || this.results.length > 0) {\n        this.isOpen = true;\n      } else {\n        this.selectedIndex = -1;\n        this.isOpen = false;\n      }\n    },\n    /* Called when the user clicks or taps outside the component. */\n    handleClickOutside(event) {\n      if (!this.$el.contains(event.target)) {\n        this.selectedIndex = -1;\n        this.isOpen = false;\n        /* Not good, because it would act even after a right choice. Clicking\r\n        outside the component should not delete anything. */\n        // this.clearTxt();\n      }\n    },\n    /* Keyboard support, fired when the use uses arrow keys to navigate \r\n    through the list. This one addresses the arrow down key. */\n    /*onArrowDown() {\r\n    \tthis.clearHoverSelection();\r\n    \tif (this.selectedIndex < this.results.length - 1) {\r\n    \t\tthis.selectedIndex++;\r\n    \t\tthis.addHoverSelection();\r\n    \t\tthis.calculateScrollPosition();\r\n    \t}\r\n    \t\r\n    },*/\n    onArrowDown() {\n      if (this.search.trim() === '') {\n        if (this.results.length > 0) {\n          this.isOpen = true;\n          this.selectedIndex = -1;\n          this.$nextTick(() => {\n            this.$refs.resultsList.querySelector('.autocomplete-result:first-child').classList.add('is-active');\n          });\n          this.$refs.inputField.focus();\n        }\n      } else {\n        if (this.selectedIndex < this.results.length - 1) {\n          this.selectedIndex++;\n          this.addHoverSelection();\n          this.calculateScrollPosition();\n        }\n      }\n    },\n    /* Addresses the arrow up key */\n    onArrowUp() {\n      if (this.selectedIndex > 0) {\n        this.selectedIndex--;\n        this.calculateScrollPosition();\n      }\n    },\n    /* When Enter is pressed the currently selected index gets choosed. */\n    onEnter() {\n      this.search = this.results[this.selectedIndex];\n      this.selectedIndex = -1;\n      this.isOpen = false;\n    },\n    /* Sets the search input to the value of the currently highlighted item, then close \r\n    the suggestions by setting isOpen to false.*/\n    selectItem() {\n      if (this.selectedIndex !== -1) {\n        this.search = this.results[this.selectedIndex];\n        this.isOpen = false;\n        // Focus on the next input element\n        this.$nextTick(() => {\n          const nextInput = this.$refs.nextInputElement;\n          if (nextInput && nextInput.focus) {\n            nextInput.focus();\n          }\n        });\n      }\n    },\n    /* This function and the next one seem to be necessary when the user begins to use\r\n    the keyboard after the user previously used the mouse. Not sure if these methods\r\n    are really needed. Comments are apprecied.*/\n    clearHoverSelection() {\n      this.$refs.resultsList.querySelectorAll('.autocomplete-result').forEach((element, index) => {\n        if (index !== this.selectedIndex) {\n          element.classList.remove('is-active');\n        }\n      });\n    },\n    addHoverSelection() {\n      this.$refs.resultsList.querySelectorAll('.autocomplete-result').forEach((element, index) => {\n        if (index === this.selectedIndex) {\n          element.classList.add('is-active');\n        }\n      });\n    },\n    /* Keeps the selection of the item always vertically centered. */\n    calculateScrollPosition() {\n      const computedStyle = window.getComputedStyle(this.$refs.resultsList);\n      const fontSize = parseFloat(computedStyle.fontSize);\n      // the following line was commented because it doesn't work\n      //const lineSpacing = parseFloat(computedStyle.lineHeight) || 1.5;\n      const lineSpacing = 1.5;\n      //console.log(computedStyle.lineHeight);\n      const container = this.$refs.resultsList;\n      const scrollPosition = (this.selectedIndex - 3) * lineSpacing * fontSize;\n      container.scrollTop = scrollPosition;\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/components/SearchAutocomplete.vue?vue&type=script&lang=js\n");

/***/ }),

/***/ "./node_modules/webpack-plugin-vuetify/dist/scriptLoader.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[4]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/components/SearchAutocomplete.vue?vue&type=template&id=529fd040":
/*!*******************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/webpack-plugin-vuetify/dist/scriptLoader.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[4]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/components/SearchAutocomplete.vue?vue&type=template&id=529fd040 ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   render: function() { return /* binding */ render; }\n/* harmony export */ });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm-bundler.js\");\n\nconst _hoisted_1 = {\n  class: \"autocomplete\"\n};\nconst _hoisted_2 = {\n  class: \"autocomplete-results\",\n  ref: \"resultsList\"\n};\nconst _hoisted_3 = [\"onMouseover\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_1, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\" In the setup below, the prevent modifier ensures that the default behavior of the arrow keys is prevented, allowing your custom key event handling to take effect. \"), (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.search = $event),\n    onInput: _cache[1] || (_cache[1] = (...args) => $options.onChange && $options.onChange(...args)),\n    onFocus: _cache[2] || (_cache[2] = (...args) => $options.clearTxt && $options.clearTxt(...args)),\n    onKeydown: [_cache[3] || (_cache[3] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.withKeys)((0,vue__WEBPACK_IMPORTED_MODULE_0__.withModifiers)((...args) => $options.resetCmp && $options.resetCmp(...args), [\"prevent\"]), [\"esc\"])), _cache[4] || (_cache[4] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.withKeys)((0,vue__WEBPACK_IMPORTED_MODULE_0__.withModifiers)((...args) => $options.onArrowDown && $options.onArrowDown(...args), [\"prevent\"]), [\"down\"])), _cache[5] || (_cache[5] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.withKeys)((0,vue__WEBPACK_IMPORTED_MODULE_0__.withModifiers)((...args) => $options.onArrowUp && $options.onArrowUp(...args), [\"prevent\"]), [\"up\"])), _cache[6] || (_cache[6] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.withKeys)((0,vue__WEBPACK_IMPORTED_MODULE_0__.withModifiers)((...args) => $options.selectItem && $options.selectItem(...args), [\"prevent\"]), [\"enter\"])), _cache[7] || (_cache[7] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.withKeys)((0,vue__WEBPACK_IMPORTED_MODULE_0__.withModifiers)((...args) => $options.selectItem && $options.selectItem(...args), [\"prevent\"]), [\"tab\"]))],\n    type: \"text\",\n    ref: \"inputField\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[vue__WEBPACK_IMPORTED_MODULE_0__.vModelText, $data.search]]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\" The mouseover event here is very important, because it allows\\r\\n\\t\\tto select the element on pressing enter or tab, even if this takes\\r\\n\\t\\tmore than that \"), (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"ul\", _hoisted_2, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\" The result variable is only used to cycle through the feteched\\r\\n\\t\\t\\tresult and to populate the dom list. result is not needed to actually\\r\\n\\t\\t\\tselect an element because its index is used instead \"), ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(true), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)($data.results, (result, i) => {\n    return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"li\", {\n      key: i,\n      onClick: _cache[8] || (_cache[8] = $event => $options.selectItem()),\n      onMouseover: $event => $data.selectedIndex = i,\n      class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)([\"autocomplete-result\", {\n        'is-active': i === $data.selectedIndex\n      }])\n    }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(result), 43 /* TEXT, CLASS, PROPS, NEED_HYDRATION */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[vue__WEBPACK_IMPORTED_MODULE_0__.vShow, $data.isOpen]])]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", null, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"input\", {\n    class: \"nextEle\",\n    \"onUpdate:modelValue\": _cache[9] || (_cache[9] = $event => $data.nextInputValue = $event),\n    ref: \"nextInputElement\",\n    type: \"text\",\n    placeholder: \"illustrating the focus\"\n  }, null, 512 /* NEED_PATCH */), [[vue__WEBPACK_IMPORTED_MODULE_0__.vModelText, $data.nextInputValue]])])], 64 /* STABLE_FRAGMENT */);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/webpack-plugin-vuetify/dist/scriptLoader.js!./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[4]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/components/SearchAutocomplete.vue?vue&type=template&id=529fd040\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ !function() {
/******/ 	__webpack_require__.h = function() { return "61feae7a8dc286bd"; }
/******/ }();
/******/ 
/******/ }
);